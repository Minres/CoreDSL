module com.minres.coredsl.GenerateCoreDsl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var projectName = "com.minres.coredsl"
var runtimeProject = "../${projectName}"

Workflow {

    // This cleans the directory before generating
    component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }
    // This handles the generation of the model classes
    component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
        genModel = "platform:/resource/${projectName}/model/CoreDsl.genmodel"
        srcPath = "platform:/resource/${projectName}/src-gen"
    }
      // This handles the generation of the standalone setub
    bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
        scanClassPath = true
        platformUri = rootPath
    }  

	component = XtextGenerator {
        // We tell the xtext generator to avoid cleaning, because otherwise it
        // would remove the classes generated by the ecore
        cleaner = {
            enabled = false
        } 
		configuration = {
			project = StandardProjectConfig {
				baseName = projectName
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				web = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				lineDelimiter = "\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = false
			}
		}
		language = StandardLanguage {
			name = "com.minres.coredsl.CoreDsl"
			fileExtensions = "core_desc"
            referencedResource = "platform:/resource/com.minres.coredsl/model/CoreDsl.genmodel"

            fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}

            formatter = {
                generateStub = false
                generateXtendStub = false
            }

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				// Generates checks for @Deprecated grammar annotations, an IssueProvider and a corresponding PropertyPage
				generateDeprecationValidation = true
				generateStub = false
			}
			parserGenerator = {
				debugGrammar = true
			}
			generator = {
				generateStub = false
			}
//            scopeProvider = scoping.ImportNamespacesScopingFragment2 {
//                generateXtendStub = false
//            }
			junitSupport = {
				junitVersion = "5"
			}
//			fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
//				options =parser.antlr.AntlrOptions {
//					backtrack=true
//				} 
//			}
		}
	}
}
